package BinaryTreeWork;

import java.util.LinkedList;
import java.util.Queue;

public class BinaryTreeDynamicData {
    static Node root;
    static class Node {
        int data;
        Node left;
        Node right;

        Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }
    private  void deleteDeepestRightmostNode(Node deleteNode) {
        Queue<Node> queue = new LinkedList<>();
        Node temp = root;

        queue.add(temp);
        while (!queue.isEmpty()) {
            temp = queue.poll();

            if (temp.right != null) {
                if (temp.right == deleteNode) {
                    temp.right = null;
                    return;
                } else {
                    queue.add(temp.right);
                }
            }
            if (temp.left != null) {
                if (temp.left == deleteNode) {
                    temp.left = null;
                    return;
                } else {
                    queue.add(temp.left);
                }
            }
        }
    }
    //delete the key and replace with deepest right most
                    // 10
                 // 20     30
                //40  50 60  70
              // key =30; 30 will replace with 70
    //output of tree after deletion
          // 10
      // 20     70
    // 40  50 60   null
    private  void delete(int key){
        //tree is empty
        if(root== null){
            System.out.println("empty tree not delete , not possible");
            return;
        }
        //only on node in the tree
        if(root.left == null && root.right==null){
            if(root.data == key){
                //one node is deleted
                root = null;
            }
        }
        Queue<Node> queue = new LinkedList<>();
        Node temp =root;
        queue.add(temp);

   Node deleteNode =null;
        while(!queue.isEmpty()){
            temp = queue.poll();

            if(temp.data ==key ){
                deleteNode = temp;
                //break;
            }
            if(temp.left!=null){
                queue.add(temp.left);
            }
            if(temp.right!=null){
                queue.add(temp.right);
            }
        }
        if(deleteNode != null){
            deleteNode.data = temp.data;
            deleteDeepestRightmostNode(temp);

        }

    }
    private void LevelOrder(){

        Queue<Node> queue = new LinkedList<>();
        Node temp =root;
        queue.add(temp);

        while(!queue.isEmpty()){
            temp = queue.poll();
            System.out.print(temp.data+" ");
            if(temp.left!=null){
                queue.add(temp.left);
            }
            if(temp.right!=null){
                queue.add(temp.right);
            }
        }
    }
    private void insert(int data){
        Node node= new Node(data);
        if(root==null){
            root =node;
        }
        else {
            Queue<Node> queue = new LinkedList<>();
            Node temp =root;
            queue.add(temp);
            while(!queue.isEmpty()){
                temp = queue.poll();

                if(temp.left!=null){
                    queue.add(temp.left);
                }else{
                    temp.left =node;
                    break;
                }
                if(temp.right!=null){
                    queue.add(temp.right);
                }else{
                    temp.right = node;
                    break;
                }
            }
        }
    }

    public static void main(String[] args) {
       BinaryTreeDynamicData btree= new BinaryTreeDynamicData();
        btree.insert(10);
        btree.insert(20);
        btree.insert(30);
        btree.insert(40);
        btree.insert(50);
        System.out.println("level order traversal");
        btree.LevelOrder();
        btree.delete(40);
        System.out.println();
        System.out.println("after deleting node 30");
        btree.LevelOrder();
//we can do same with preoder ,postorder, inorder *******
    }
}
